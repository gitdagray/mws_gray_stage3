function writeData(e,t){return dbPromise.then(n=>{const o=n.transaction(e,"readwrite");return o.objectStore(e).put(t),o.complete})}function readAllData(e){return dbPromise.then(t=>{return t.transaction(e,"readonly").objectStore(e).getAll()})}function deleteAnItem(e,t){dbPromise.then(t=>{const n=t.transaction(e,"readwrite");return n.objectStore(e).clear(),n.complete})}function handleFaveClick(e,t){console.log("newState: "+t);const n="true"===t.toString()?"http://localhost:1337/restaurants/"+e+"/?is_favorite=true":"http://localhost:1337/restaurants/"+e+"/?is_favorite=false";console.log("faveURL: "+n),"serviceWorker"in navigator?(console.log("writing to idb for fave click"),navigator.serviceWorker.ready.then(e=>{writeData("sync-newFav",{url:n}).catch(e=>console.log(e))}).then(()=>{if(navigator.onLine){var e=new Event("sendFave");window.dispatchEvent(e)}})):(console.log("fallback route"),sendNewFave(n,e,t))}async function sendNewFave(e,t,n){try{const t=await fetch(e,{method:"PUT"}),n=await t.json();console.log("myFaveReply: "+JSON.stringify(n))}catch(e){console.log("Fave failed."),console.error(e)}}async function getNetworkData(e){try{const t=await fetch(e);if(console.log(t.status),200==t.status){const n=t.clone(),o=await n.json();if(e.indexOf("http://localhost:1337/restaurants")>-1)for(let e in o)writeData("restaurants",o[e]);else if(e.indexOf("http://localhost:1337/reviews")>-1)for(let e in o)writeData("reviews",o[e]);return t}}catch(e){console.log("getNetworkData: must be OFFLINE")}}const dbPromise=idb.open("restaurants-db",1,e=>{e.objectStoreNames.contains("restaurants")||e.createObjectStore("restaurants",{keyPath:"id"}),e.objectStoreNames.contains("reviews")||e.createObjectStore("reviews",{keyPath:"id"}),e.objectStoreNames.contains("sync-newRev")||e.createObjectStore("sync-newRev",{keyPath:"id",autoIncrement:!0}),e.objectStoreNames.contains("sync-newFav")||e.createObjectStore("sync-newFav",{keyPath:"id",autoIncrement:!0})}),favEm=async e=>{for(let t of e){let e=await fetch(t.url,{method:"PUT"}),n=await e.json();console.log("mydtReply: "+JSON.stringify(n)),e.ok&&deleteAnItem("sync-newFav",t.id)}},postEm=async e=>{for(let t of e){let e=await fetch("http://localhost:1337/reviews/",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({restaurant_id:t.restaurant_id,name:t.name,rating:t.rating,comments:t.comments})}),n=await e.json();console.log("mydtReply: "+JSON.stringify(n)),e.ok&&deleteAnItem("sync-newRev",t.id)}};