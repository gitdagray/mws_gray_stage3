function writeData(e,t){return dbPromise.then(o=>{const n=o.transaction(e,"readwrite");return n.objectStore(e).put(t),n.complete})}function readAllData(e){return dbPromise.then(t=>{return t.transaction(e,"readonly").objectStore(e).getAll()})}function deleteAnItem(e,t){dbPromise.then(t=>{const o=t.transaction(e,"readwrite");return o.objectStore(e).clear(),o.complete})}function handleFaveClick(e,t){console.log("newState: "+t);const o="true"===t.toString()?"http://localhost:1337/restaurants/"+e+"/?is_favorite=true":"http://localhost:1337/restaurants/"+e+"/?is_favorite=false";console.log("faveURL: "+o),"serviceWorker"in navigator&&"SyncManager"in window?(console.log("sync reg route"),navigator.serviceWorker.ready.then(e=>{writeData("sync-newFav",{url:o}).then(()=>e.sync.register("sync-new-fave")).catch(e=>console.log(e))})):(console.log("fallback route"),sendNewFave(o,e,t))}async function sendNewFave(e,t,o){try{const t=await fetch(e,{method:"PUT"}),o=await t.json();console.log("myFaveReply: "+JSON.stringify(o))}catch(e){console.log("Fave failed."),console.error(e)}}async function getNetworkData(e){try{const t=await fetch(e);if(console.log(t.status),200==t.status){const o=t.clone(),n=await o.json();if(e.indexOf("http://localhost:1337/restaurants")>-1)for(let e in n)writeData("restaurants",n[e]);else if(e.indexOf("http://localhost:1337/reviews")>-1)for(let e in n)writeData("reviews",n[e]);return t}}catch(e){console.log("getNetworkData: must be OFFLINE"),console.error(e)}}const dbPromise=idb.open("restaurants-db",1,e=>{e.objectStoreNames.contains("restaurants")||e.createObjectStore("restaurants",{keyPath:"id"}),e.objectStoreNames.contains("reviews")||e.createObjectStore("reviews",{keyPath:"id"}),e.objectStoreNames.contains("sync-newRev")||e.createObjectStore("sync-newRev",{keyPath:"id",autoIncrement:!0}),e.objectStoreNames.contains("sync-newFav")||e.createObjectStore("sync-newFav",{keyPath:"id",autoIncrement:!0})});